/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.json;

import org.junit.Test;
import static org.junit.Assert.*;

public class JsonParserTest {
    @Test public void simpleKeyValue() throws Exception {
        JsonParser parser = new JsonParser();
        JsonResult result = parser.parse("{ \"key\": \"Hello, world!\" }");
        assertEquals(result.getString("key"), "Hello, world!");
    }

    @Test public void multipleUniqueKeys() throws Exception {
        JsonParser parser = new JsonParser();
        JsonResult result = parser.parse("{ \"key1\": \"value1\", \"key2\": 22.23, \"key3\": -123 }");
        assertEquals(result.getString("key1"), "value1");
        assertEquals(result.getDouble("key2"), 22.23, 0.00);
        assertEquals(result.getInt("key3"), -123);
    }

    @Test public void objectValue() throws Exception {
        JsonParser parser = new JsonParser();
        JsonResult result = parser.parse("{ \"key\": { \"innerkey\": 10 }, \"key2\": 1 }");
        assertEquals(result.getObject("key").getInt("innerkey"), 10);
        assertEquals(result.getInt("key2"), 1);
    }

    @Test public void duplicatekeys() throws Exception {
        JsonParser parser = new JsonParser();
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": 1, \"key\": 2 }"));
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": 1, \"key\": null }"));
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": null, \"key\": 1 }"));
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": null, \"key\": null }"));

        JsonResult result = new JsonResult();
        // transition from null to value
        result.setNull("key");
        result.setValue("key", "hello");
        assertFalse(result.isNull("key"));
        assertEquals(result.getString("key"), "hello");

        // transition from value to null
        JsonResult result2 = new JsonResult();
        result2.setValue("key", "hello");
        result2.setNull("key");
        assertTrue(result2.isNull("key"));
        assertEquals(result2.getString("key"), null);

        // overwrite null with null
        JsonResult result3 = new JsonResult();
        result3.setNull("key");
        result3.setNull("key");
        assertTrue(result3.isNull("key"));

        // overwrite value with value
        JsonResult result4 = new JsonResult();
        result4.setValue("key", "hello");
        result4.setValue("key", 13);
        assertFalse(result4.isNull("key"));
        assertEquals(result4.getInt("key"), 13);
    }

    @Test public void emptyKey() throws Exception {
        JsonParser parser = new JsonParser();
        assertThrows(Exception.class, () -> parser.parse("{ \"\": 1 }"));
    }

    @Test public void emptyValue() throws Exception {
        JsonParser parser = new JsonParser();
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": }"));
    }

    @Test public void missingSeparator() throws Exception {
        JsonParser parser = new JsonParser();
        assertThrows(Exception.class, () -> parser.parse("{ \"key\" 1 }"));
    }

    @Test public void missingStartBody() throws Exception {
        JsonParser parser = new JsonParser();
        assertThrows(Exception.class, () -> parser.parse("\"key\": 1 }"));
        assertThrows(Exception.class, () -> parser.parse(" \"key\": 1 }"));
    }

    @Test public void missingEndBody() throws Exception {
        JsonParser parser = new JsonParser();
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": 1"));
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": {\"key2\": 1 }"));
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": {\"key2\": 1 } "));
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": [1,2,3]"));
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": [1,2,3] "));
    }

    @Test public void extraDelimiter() throws Exception {
        JsonParser parser = new JsonParser();
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": 1, }"));
    }

    @Test public void nullValues() throws Exception {
        JsonParser parser = new JsonParser();
        JsonResult result = parser.parse("{ \"key\": null, \"key2\": 1 }");
        assertEquals(result.isNull("key"), true);
        assertEquals(result.isNull("key2"), false);
    }

    @Test public void arrayValue() throws Exception {
        JsonParser parser = new JsonParser();
        JsonResult result = parser.parse("{ \"key\": [\"string one\", -123, 2.345, null, [1, 2, 3], { \"inner key\": \"value\" }]}");
        JsonArray array = result.getArray("key");
        assertEquals(array.getString(0), "string one");
        assertEquals(array.getInt(1), -123);
        assertEquals(array.getDouble(2), 2.345, 0.00);
        assertEquals(array.isNull(3), true);
        JsonArray innerArray = array.getArray(4);
        assertEquals(innerArray.getInt(0), 1);
        assertEquals(innerArray.getInt(1), 2);
        assertEquals(innerArray.getInt(2), 3);
        JsonResult innerObject = array.getObject(5);
        assertEquals(innerObject.getString("inner key"), "value");
    }

    @Test public void badNullValues() throws Exception {
        JsonParser parser = new JsonParser();
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": none }"));
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": NULL }"));
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": n"));
    }

    @Test public void unDelimitedKey() throws Exception {
        JsonParser parser = new JsonParser();
        assertThrows(Exception.class, () -> parser.parse("{ \"key: 1 }"));
    }

    @Test public void unDelimitedValue() throws Exception {
        JsonParser parser = new JsonParser();
        assertThrows(Exception.class, () -> parser.parse("{ \"key\": \"value }"));
    }

    @Test public void addValues() throws Exception {
        JsonParser parser = new JsonParser();
        JsonResult result = parser.parse("{ \"key\": \"value\" }");
        // overwrite value
        result.setValue("key", 13);
        assertEquals(result.getInt("key"), 13);
        assertFalse(result.isNull("key"));

        // nullify a value
        result.setNull("key");
        assertTrue(result.isNull("key"));

        // other value types (now using unique keys)
        result.setValue("key2", "string value");
        assertEquals(result.getString("key2"), "string value");

        result.setValue("key3", 3.14159);
        assertEquals(result.getDouble("key3"), 3.14159, 0.00);

        JsonResult subObj = new JsonResult();
        subObj.setValue("innerkey", "innervalue");
        result.setValue("key4", subObj);
        assertEquals(result.getObject("key4").getString("innerkey"), "innervalue");

        JsonArray array = new JsonArray();
        array.add(1);
        array.add(2.2);
        array.add("3");
        result.setValue("key5", array);
        JsonArray getArray = result.getArray("key5");
        assertEquals(getArray.getInt(0), 1);
        assertEquals(getArray.getDouble(1), 2.2, 0.00);
        assertEquals(getArray.getString(2), "3");
    }

    @Test public void emptyJson() throws Exception {
        JsonParser parser = new JsonParser();
        // verifying no exceptions happen
        parser.parse("{}");
        parser.parse("{ }");
        parser.parse("{  }");
    }

    @Test public void parseArrayDirectly() throws Exception {
        JsonArray array = JsonArray.fromString("[{\"key\": 1}, {\"key\": 2}, {\"key\": 3}]");
        assertEquals(array.getObject(0).getInt("key"), 1);
        assertEquals(array.getObject(1).getInt("key"), 2);
        assertEquals(array.getObject(2).getInt("key"), 3);
    }
}
